{"version":3,"sources":["components/Alert.js","components/NavBar.js","components/TextForm.js","App.js","reportWebVitals.js","index.js"],"names":["Alert","props","alert","className","type","role","word","Lower","toLowerCase","charAt","toUpperCase","slice","capitalize","msg","NavBar","mode","href","title","id","onClick","toggleMode","htmlFor","placeholder","TextForm","useState","text","setText","heading","value","onChange","event","target","rows","newText","showAlert","split","length","defaultProps","App","setMode","setAlert","message","setTimeout","document","body","style","backgroundColor","color","reportWebVitals","onPerfEntry","Function","then","getCLS","getFID","getFCP","getLCP","getTTFB","ReactDOM","render","StrictMode","getElementById"],"mappings":"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","file":"static/js/main.2637e5d9.chunk.js","sourcesContent":["import React from 'react'\r\n\r\nfunction Alert(props) {\r\n    const capitalize =(word)=>{\r\n        const Lower = word.toLowerCase();\r\n        return Lower.charAt(0).toUpperCase() + Lower.slice(1)\r\n    }\r\n    return (\r\n        props.alert && <div className={`alert alert-${props.alert.type} alert-dismissible fade show`} role=\"alert\">\r\n            <strong>{capitalize(props.alert.type)}</strong>: {props.alert.msg}\r\n            </div>\r\n    )\r\n}\r\n\r\nexport default Alert","import React from 'react'\r\nimport PropTypes from 'prop-types'\r\n// import { Link } from 'react-router-dom';\r\n\r\n\r\nexport default function NavBar(props) {\r\n    return (\r\n        <nav className={`navbar navbar-expand-lg navbar-${props.mode} bg-${props.mode}`}>\r\n  <div className=\"container-fluid\">\r\n    <a className=\"navbar-brand\" href=\"#\">{props.title}</a>\r\n    <button className=\"navbar-toggler\" type=\"button\" data-bs-toggle=\"collapse\" data-bs-target=\"#navbarSupportedContent\" aria-controls=\"navbarSupportedContent\" aria-expanded=\"false\" aria-label=\"Toggle navigation\">\r\n      <span className=\"navbar-toggler-icon\"></span>\r\n    </button>\r\n    <div className=\"collapse navbar-collapse\" id=\"navbarSupportedContent\">\r\n      <ul className=\"navbar-nav me-auto mb-2 mb-lg-0\">\r\n        <li className=\"nav-item\">\r\n          <a className=\"nav-link active\" aria-current=\"page\" href=\"#\">Home</a>\r\n        </li>\r\n        <li className=\"nav-item\">\r\n          <a className=\"nav-link\" href=\"#\">About</a>\r\n        </li>\r\n      </ul>\r\n        <div className=\"form-check form-switch\">\r\n          <input className=\"form-check-input\" type=\"checkbox\" role=\"switch\" id=\"flexSwitchCheckDefault\" onClick={props.toggleMode}/>\r\n          <label className=\"form-check-label text-dark\" htmlFor=\"flexSwitchCheckDefault\">Enable DarkMode</label>\r\n        </div>\r\n      <form className=\"d-flex\">\r\n        <input className=\"form-control me-2\" type=\"search\" placeholder=\"Search\" aria-label=\"Search\" />\r\n        <button className=\"btn btn-outline-success\" type=\"submit\">Search</button>\r\n      </form>\r\n    </div>\r\n  </div>\r\n</nav>\r\n    )\r\n}\r\nNavBar.propTypes = {\r\n    title: PropTypes.string.isRequired,\r\n}\r\nNavBar.defaultProps ={\r\n    title: 'ReactJS'\r\n}","import React, { useState } from \"react\";\r\n\r\nexport default function TextForm(props) {\r\n  const handleUpClick = () => {\r\n    setText(\"You Have Cliked handleUpClick\");\r\n    let newText = text.toUpperCase();\r\n    setText(newText);\r\n    props.showAlert(\"Converted To Uppercase\", \"success\")\r\n  };\r\n  const handleLowClick = () => {\r\n    let newText = text.toLowerCase();\r\n    setText(newText);\r\n    props.showAlert(\"Converted To Lowercase\", \"success\")\r\n  }\r\n  const handleClearClick = () => {\r\n    let newText = ''\r\n    setText(newText);\r\n    props.showAlert(\"Cleared Text\", \"danger\")\r\n  }\r\n  const handleOnChange = (event) => {\r\n    setText(event.target.value);\r\n  };\r\n  const [text, setText] = useState(\"\");\r\n  return (\r\n    <>\r\n    <div className=\"container my-4\">\r\n        <h1>{props.heading} </h1>\r\n        <div className=\"mb-3\">\r\n          <textarea\r\n            className=\"form-control my-4\"\r\n            value={text}\r\n            onChange={handleOnChange}\r\n            id=\"exampleFormControlTextarea1\"\r\n            rows=\"3\"\r\n          ></textarea>\r\n        </div>\r\n        <button className=\"btn btn-primary mx-2\" onClick={handleUpClick}>\r\n          Convert To Uppercase\r\n        </button>\r\n        <button className=\"btn btn-warning mx-2\" onClick={handleLowClick}>Convert To Lowercase</button>\r\n        <button className=\"btn btn-danger mx-2\" onClick={handleClearClick}>Clear</button>\r\n    </div>\r\n    <div className=\"container my-4\">\r\n      <h1>Text Summary</h1>\r\n      <p><b>{text.split(\" \").length}</b> words and <b>{text.length}</b> characters</p>\r\n      <p><b>{0.008*text.split(\" \").length}</b> Minutes To Read</p>\r\n      <h3>Preview</h3>\r\n      <p>{text}</p>\r\n    </div>\r\n    </>\r\n  );\r\n}\r\n","// import \"./App.css\";\n\nimport React, { useState } from 'react'\nimport Alert from './components/Alert';\nimport NavBar from \"./components/NavBar\";\nimport TextForm from \"./components/TextForm\";\n// import {\n//   BrowserRouter as Router,\n//   Switch,\n//   Route,\n// } from \"react-router-dom\";\n\nfunction App() {\n  const [mode, setMode] = useState(\"light\")\n  const toggleMode = () => {\n    if(mode === \"light\"){\n      setMode(\"dark\");\n      showAlert(\"Dark Mode Has Been Enabled\", \"success\")\n      document.body.style.backgroundColor = \"#343a40\";\n      document.body.style.color = \"white\";\n      document.title = \"TextUtils - Dark Mode\"\n    }\n    else{\n      setMode(\"light\");\n      showAlert(\"Light Mode Has Been Enabled\", \"success\")\n      document.body.style.backgroundColor = \"white\";\n      document.body.style.color = \"black\";\n      document.title = \"TexUtils - Light Mode\"\n    }\n  }\n  const [alert, setAlert] = useState(null);\n  const showAlert = (message, type)=>{\n    setAlert({\n      msg: message,\n      type: type,\n    })\n    setTimeout(() => {\n      setAlert(null);\n    }, 2000);\n  }\n  return (\n    <>\n    {/* <Router>\n      <div> */}\n      <NavBar title=\"TextUtils\" mode={mode} toggleMode={toggleMode} />\n      {/* <NavBar /> */}\n      <Alert alert={alert}/>\n      <TextForm showAlert={showAlert} heading=\"Enter The Text To Analyse Below\"/> \n      {/* <Switch>\n          <Route  exact path=\"/about\">\n            <About />\n          </Route>\n          <Route exact path=\"/\">\n          </Route>\n        </Switch>\n      </div>\n    </Router> */}\n    </>\n  );\n}\n\nexport default App;\n","const reportWebVitals = onPerfEntry => {\n  if (onPerfEntry && onPerfEntry instanceof Function) {\n    import('web-vitals').then(({ getCLS, getFID, getFCP, getLCP, getTTFB }) => {\n      getCLS(onPerfEntry);\n      getFID(onPerfEntry);\n      getFCP(onPerfEntry);\n      getLCP(onPerfEntry);\n      getTTFB(onPerfEntry);\n    });\n  }\n};\n\nexport default reportWebVitals;\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport reportWebVitals from './reportWebVitals';\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n\n// If you want to start measuring performance in your app, pass a function\n// to log results (for example: reportWebVitals(console.log))\n// or send to an analytics endpoint. Learn more: https://bit.ly/CRA-vitals\nreportWebVitals();\n"],"sourceRoot":""}